[{"C:\\IT-incubator\\JS\\JSwednesday\\src\\index.tsx":"1","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\state.ts":"2","C:\\IT-incubator\\JS\\JSwednesday\\src\\App.tsx":"3","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\currencyReducer.ts":"4","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\Lesson4.tsx":"5","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\actions.ts":"6","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\lesson_4.ts":"7"},{"size":319,"mtime":1609752860853,"results":"8","hashOfConfig":"9"},{"size":286,"mtime":1609751766196,"results":"10","hashOfConfig":"9"},{"size":610,"mtime":1615538147960,"results":"11","hashOfConfig":"9"},{"size":1683,"mtime":1612857363761,"results":"12","hashOfConfig":"9"},{"size":512,"mtime":1615538147977,"results":"13","hashOfConfig":"9"},{"size":1741,"mtime":1612861813591,"results":"14","hashOfConfig":"9"},{"size":9657,"mtime":1615539733760,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"11kdx2u",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"C:\\IT-incubator\\JS\\JSwednesday\\src\\index.tsx",[],["33","34"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\state.ts",[],"C:\\IT-incubator\\JS\\JSwednesday\\src\\App.tsx",["35"],"import React from 'react';\r\nimport './App.css';\r\nimport Lesson1 from './lessons/lesson1/lesson1';\r\n// import './lessons/lesson2/lesson2';\r\n// import Lesson3 from './lessons/lesson3/Lesson3';\r\nimport Lesson4 from './lessons/lesson4/Lesson4';\r\n// import './lessons/lesson5/lesson5';\r\n// import './lessons/lesson6/lesson6';\r\n// import './lessons/lesson7/lesson7';\r\n// import './lessons/lesson8/lesson8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"container\">\r\n         {/*   <Lesson1 />*/}\r\n            {/*<Lesson3 />*/}\r\n            <Lesson4 />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\currencyReducer.ts",[],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\Lesson4.tsx",[],"C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\actions.ts",[],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\lesson_4.ts",["36","37"],"import {log} from \"util\";\r\n\r\nconsole.log('lesson 4');\r\n\r\n// http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\r\n// https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\r\n\r\n\r\n// Task 01\r\n// Создайте промис, который постоянно находиться в состоянии pending.\r\n// В конструкторе промиса выведите в консоль сообщение \"Promise is created\".\r\n\r\n// let a = new Promise((res) => {\r\n//     console.log('Promise is created')\r\n// })\r\n// console.log(a)\r\n\r\n// Task 02\r\n// Создайте промис, который после создания сразу же переходит в состояние resolve\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// let pr = new Promise((res, rej) => {\r\n//     res('Promise Data')\r\n// })\r\n// pr.then(console.log)\r\n// Task 03\r\n// Создайте промис, который после создания сразу же переходит в состояние rejected\r\n// и возвращает строку 'Promise Error'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// Promise.reject('Promise Error').catch(console.log)\r\n\r\n// Task 04\r\n// Создайте промис, который переходит в состояние resolved через 3с.\r\n// (Используйте setTimeout)\r\n// и возвращает строку 'Promise Data'\r\n// Получите данные промиса и выведите их в консоль\r\n\r\n// let t4 = new Promise((res,rej) => {\r\n//     setTimeout(()=> {\r\n//         res('Promise Data')\r\n//     }, 3000)\r\n// })\r\n// const t4 = new Promise((res) => {\r\n//     setTimeout(res, 3000, 'Promise Data')\r\n// })\r\n// t4.then(console.log)\r\n\r\n// Task 05\r\n// Создайте литерал объекта handlePromise со следующими свойствами:\r\n// promise, resolve, reject, onSuccess, onError\r\n// Проинициализируйте первые три свойства null,\r\n// а последние два функциями, которые принимают один параметр и выводят\r\n// в консоль сообщения: первая - `Promise is resolved with data: ${paramName}`\r\n// вторая - `Promise is rejected with error: ${paramName}`\r\n// Создайте три обработчика события click для кнопок \"Create Promise\", \"Resolve Promise\", \"Reject Promise\".\r\n// Первый обработчик, создает промис, заполняет первые три свойства,\r\n// описаного выше объекта: свойство promise получает новый созданный промис,\r\n// свойства resolve и reject получают ссылки на соответствующие функции\r\n// resolve и reject. Следующие два обработчика запускают методы resolve и reject.\r\n\r\ntype testObjType = {\r\n    promise: null | Promise<any>\r\n    resolve: null | Function\r\n    reject: null | Function\r\n    onSuccess: (paramName: any) => void\r\n    onError: (paramName: any) => void\r\n}\r\n\r\nconst handlePromise: testObjType = {\r\n    promise: null,\r\n    resolve: null,\r\n    reject: null,\r\n    onSuccess: (paramName: any) => {\r\n        console.log(`Promise is resolved with data: ${paramName}`)\r\n    },\r\n    onError: (paramName: any) => {\r\n        console.log(`Promise is rejected with error: ${paramName}`)\r\n    }\r\n}\r\n\r\nexport const createPromise = () => {\r\n    const somePromise: Promise<any> = new Promise((res,rej) => {\r\n        handlePromise.resolve = res;\r\n        handlePromise.reject = rej;\r\n    });\r\n    handlePromise.promise = somePromise;\r\n    handlePromise.promise\r\n        .then(res => handlePromise.onSuccess(res))\r\n        .catch(err => handlePromise.onError(err))\r\n    console.log(handlePromise);\r\n}\r\n\r\nexport const resolvePromise = () => {\r\n    handlePromise.resolve && handlePromise.resolve('Hello')\r\n}\r\n\r\nexport const rejectPromise = () => {\r\n    handlePromise.reject && handlePromise.reject('error')\r\n}\r\n\r\n// Task 06\r\n// Создайте промис, который через 1 с возвращает строку \"My name is\".\r\n// Создайте функцию onSuccess, которая получает один параметр,\r\n// прибавляет к нему Ваше имя и возвращает новую строку из функции\r\n// Создайте функцию print, которая выводит в консоль значение своего параметра\r\n// Добавьте два метода then и передайте созданные функции.\r\n\r\n// const promise: Promise<string> = new Promise((res) => {\r\n//     setTimeout(res, 1000, \"My name is \")\r\n// })\r\n// const onSuccess = (name: string): string => {\r\n//     // return name + \"Pavel\"\r\n//     return `${name}Pavel`\r\n// }\r\n// const print = (value: string): void => {\r\n//     console.log(value)\r\n// }\r\n// promise\r\n//     .then(onSuccess)\r\n//     .then(print)\r\n//\r\n\r\n// Task 7\r\n// Создайте три промиса. Первый промис возвращает объект { name: \"Anna\" } через 2с,\r\n// второй промис возвращает объект {age: 16} через 3 с, а третий {city: ''} через 4с.\r\n// Получите результаты работы промисов, объедините свойства объектов\r\n// и выведите в консоль {name, age, city}\r\n\r\n// const pr1: Promise<Object> = new Promise((res) => {\r\n//     setTimeout(res, 2000, {name: \"Pavel\"})\r\n// })\r\n// const pr2: Promise<Object> = new Promise((res) => {\r\n//     setTimeout(res, 3000, {age: 33})\r\n// })\r\n// const pr3: Promise<Object> = new Promise((res) => {\r\n//     setTimeout(res, 4000, {city: 'Minsk'})\r\n// })\r\n//\r\n// let result: Promise<Array<Object>> = Promise.all([pr1, pr2, pr3])\r\n// result.then(([a,b,c]: Array<Object>) => ({...a, ...b, ...c})).then(console.log)\r\n\r\n\r\n\r\n\r\n//Task 1\r\n// setTimeout( () => console.log(1), 0)\r\n// console.log(2);\r\n// (()=> console.log(3))();\r\n// Promise.resolve(console.log(4))  // микро таска не создалась (синхронный код)\r\n// 2 3 4 1\r\n\r\n//Task 2\r\n// new Promise( (res, rej) => {\r\n//     console.log(1);\r\n// });\r\n// new Promise( (res, rej) => {\r\n//     setTimeout(() => console.log(2), 0)\r\n// });\r\n// Promise.resolve(setTimeout(() => console.log(3), 0));\r\n// console.log(4);\r\n// Promise.reject(console.log(5));\r\n// 1 4 5 2 3\r\n\r\n//Task 3\r\n// (function() {\r\n//     setTimeout(() => console.log(1), 100);\r\n// })();\r\n// console.log(2);\r\n// new Promise( (res, rej) => {\r\n//     setTimeout(() => console.log(3), 50);\r\n// })\r\n// function f() {\r\n//     console.log(4)\r\n// }\r\n// Promise.resolve(console.log(5));\r\n// 2 5 3 1\r\n\r\n//Task 4\r\n// function f(num: number) {\r\n//     console.log(num)\r\n// };\r\n// Promise.resolve(1)\r\n//     .then(f);    //создалась микротаска т.к. отработал метод промиса\r\n// (function (){\r\n//     console.log(2)\r\n// })();\r\n// console.log(3);\r\n// new Promise( (res,rej) => {\r\n//     console.log(4);\r\n// });\r\n// setTimeout(f, 0, 5);\r\n// 2 3 4 1 5\r\n\r\n//Task 5\r\n// console.log(1);\r\n// function f() {\r\n//     console.log(2)\r\n// }\r\n// setTimeout( () => {\r\n//     console.log(3);\r\n//     let p = new Promise((res,rej) => {\r\n//         console.log(4);\r\n//         res();\r\n//     });\r\n//     p.then(()=>f())\r\n// }, 0);\r\n// let l = new Promise((res,rej) => {\r\n//     console.log(5);\r\n//     rej()\r\n// });\r\n// l.then(res => console.log(res)).catch(() => console.log(6));\r\n// console.log(7);\r\n// 1 5 7 6 3 4 2\r\n\r\n//Task 6\r\n// async function sleep(ms:number) {\r\n//   return  new Promise( (res,rej) => {\r\n//        setTimeout(() => {\r\n//            console.log(ms);\r\n//            res();\r\n//        }, ms * 100);\r\n//    }\r\n//    )\r\n//    }\r\n//\r\n//\r\n// async function show() {\r\n//     await sleep(3)\r\n//     await sleep(2)\r\n//     await sleep(1)\r\n// }\r\n//\r\n// show();\r\n\r\n//Task 7\r\n// let pr1 = new Promise( (res) => {\r\n//     res(10)\r\n// })\r\n// let pr2 = new Promise( (res) => {\r\n//     res(0)\r\n// })\r\n// pr1\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 2;\r\n//     })\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 2;\r\n//     })\r\n//     .then(console.log)\r\n//\r\n// pr2\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 1;\r\n//     })\r\n//     .then((res: any) => {\r\n//         console.log(res);\r\n//         return res + 1;\r\n//     })\r\n//     .then(console.log)\r\n//10 0 12 1 14  2\r\n\r\nlet Array = [0, 23, 21, 89, 15, 77, 51, 34]\r\n\r\nfor (let i = 0; i < Array.length - 1; i++) {\r\n    let isSort = true\r\n    for (let j = 0; j < Array.length - 1 - j; i++) {\r\n        if (Array[i] > Array[i + 1]) {\r\n            isSort = false\r\n            let num = Array[i];\r\n            Array[i] = Array[i+1]\r\n            Array[i + 1] = num\r\n        }\r\n    }\r\n    if (isSort) {\r\n        break\r\n    }\r\n\r\n    console.log(Array)\r\n\r\n}\r\n\r\n\r\n// just a plug\r\nexport default ()=>{};",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":3,"column":8,"nodeType":"44","messageId":"45","endLine":3,"endColumn":15},{"ruleId":"42","severity":1,"message":"46","line":1,"column":9,"nodeType":"44","messageId":"45","endLine":1,"endColumn":12},{"ruleId":"47","severity":1,"message":"48","line":289,"column":1,"nodeType":"49","endLine":289,"endColumn":23},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'Lesson1' is defined but never used.","Identifier","unusedVar","'log' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]