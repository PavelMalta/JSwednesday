[{"C:\\IT-incubator\\JS\\JSwednesday\\src\\index.tsx":"1","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\state.ts":"2","C:\\IT-incubator\\JS\\JSwednesday\\src\\App.tsx":"3","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\currencyReducer.ts":"4","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\Lesson4.tsx":"5","C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\actions.ts":"6","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\lesson_4.ts":"7","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson7\\lesson7.js":"8","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson8\\lesson8.ts":"9","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson8\\lesson_8.js":"10","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson7\\less7.js":"11"},{"size":319,"mtime":1621507557637,"results":"12","hashOfConfig":"13"},{"size":286,"mtime":1609751766196,"results":"14","hashOfConfig":"13"},{"size":573,"mtime":1622107568599,"results":"15","hashOfConfig":"13"},{"size":1683,"mtime":1612857363761,"results":"16","hashOfConfig":"13"},{"size":512,"mtime":1615538147977,"results":"17","hashOfConfig":"13"},{"size":1741,"mtime":1612861813591,"results":"18","hashOfConfig":"13"},{"size":9227,"mtime":1615541910098,"results":"19","hashOfConfig":"13"},{"size":351,"mtime":1616322548714,"results":"20","hashOfConfig":"13"},{"size":95,"mtime":1609852934598,"results":"21","hashOfConfig":"13"},{"size":13652,"mtime":1617010615974,"results":"22","hashOfConfig":"13"},{"size":1470,"mtime":1622106792459,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"11kdx2u",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":1,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\IT-incubator\\JS\\JSwednesday\\src\\index.tsx",[],["52","53"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\state.ts",[],"C:\\IT-incubator\\JS\\JSwednesday\\src\\App.tsx",["54","55"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\currencyReducer.ts",[],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\Lesson4.tsx",[],["56","57"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\redux\\actions.ts",[],["58","59"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson4\\lesson_4.ts",["60","61"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson7\\lesson7.js",["62","63","64"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson8\\lesson8.ts",["65"],"import './lesson_8'\r\n\r\nconsole.log('Lesson 8');\r\n\r\n\r\n// just a plug\r\nexport default () => {\r\n};",["66","67"],"C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson8\\lesson_8.js",["68","69","70","71","72","73","74","75","76","77","78","79","80"],"\r\n\r\n\r\n\r\n\r\nconst foo = () => {\r\n\tfor (let i = 1; i >\t0; i++)\t{\r\n\t\tprompt(\"Idite nahui!\")\r\n\t}\r\n}\r\nfoo()\r\n\r\n\r\n\r\n//A где вернется NaN\r\n// console.log(10 / 0);\r\n// console.log(10 / 'five');\r\n// console.log(10 / Number('5'));\r\n// console.log(10 / parseInt('two'));\r\n\r\n//B где указан правильный вариант\r\n// setTimeout(formatName(), 5000, 'John', 'Doe');\r\n// setTimeout('formatName', 5000, 'John', 'Doe');\r\n// setTimeout(formatName('John', 'Doe'), 5000);\r\n// setTimeout(() => {formatName('John', 'Doe')});\r\n\r\n//C дан код const copy = JSON.stringify([new String('false'), new Boolean(false), undefined]);\r\n// чему будет равно значение copy\r\n\r\n// \"[false,{}]\";\r\n// \"['false', {}]\";\r\n// \"[\"false\", false, undefined]\";\r\n// \"[\"false\", false, null]\";\r\n\r\n//D let arr = [ [1,2], [3,4,5] ]\r\n// какие выражения выведут следующий результат [1, 2, 3, 4, 5]\r\n//\r\n// [].concat(...arr); // [].concat([1,2], [3,4,5])\r\n// [].concat.apply(arr, []);\r\n// [].concat([...arr]);\r\n// [].concat.apply([], arr); // =>[].concat([1,2], [3,4,5])\r\n\r\n//E  дан следующий код\r\n// const exec = (item, delay) => new Promise(resolve => setTimeout(() => resolve(item), delay));\r\n//\r\n// async function runParallel() {\r\n// \tconst [result1, result2, result3] = await Promise.all(\r\n// \t\t[exec('x', 100), exec('y', 500), exec('z', 100)]\r\n// \t);\r\n// \treturn `parallel is done: ${result1}${result2}${result3}`\r\n// }\r\n//\r\n// // какие из ниже приведенных выражений корректно вызовут  runParallel()\r\n//\r\n// async runParallel().then(data);\r\n// runParallel().then(data);\r\n// runParallel().done(function (data) {\r\n// \treturn data;\r\n// })\r\n// runParallel().then(function (data) {\r\n// \treturn data;\r\n// })\r\n\r\n//F дан код, какой будет результат после исполнения Promise.race\r\n\r\n// let car1 = new Promise((_, reject) => setTimeout(reject, 2000, 'Car 1 crashed in'));\r\n// let car2 = new Promise(resolve => setTimeout(resolve, 1500, 'Car 2 completed'));\r\n// let car3 = new Promise(resolve => setTimeout(resolve, 3000, 'Car 3 completed'));\r\n//\r\n// Promise.race([car1, car2, car3])\r\n// \t.then(value => {\r\n// \t\tlet result = `${value} the race.`;\r\n// \t})\r\n// \t.catch(err => console.log('Race is cancelled.', err));\r\n\r\n\r\n//G что произойдет в результате исполнения ниже предложенного кода\r\n// function Monster() {this.name = 'hello'};\r\n// const s = Monster();\r\n\r\n\r\n//H что будет в результате вызова нижеприведенного кода\r\n//\r\n// setCurrentURL();\r\n// console.log('The current URL is: ' + url);\r\n//\r\n// function setCurrentURL() {\r\n// \turl = window.location.href;\r\n// }\r\n\r\n//I дан код\r\n\r\n// function Animal(size, type) {\r\n// \tthis.type = type || 'Animal';\r\n// \tthis.canTalk = false;\r\n// }\r\n// Animal.prototype.speak = function() {\r\n// \tif (this.canTalk) {\r\n// \t\tconsole.log('It spoke!');\r\n// \t}\r\n// }\r\n//\r\n// let Pet = function(size, type, name, owner) {\r\n// \tAnimal.call(this, size, type);\r\n// \tthis.size = size;\r\n// \tthis.name = name;\r\n// \tthis.owner = owner;\r\n// }\r\n//\r\n// Pet.prototype = Object.create(Animal.prototype);\r\n// let pet1 = new Pet();\r\n//\r\n// // какие 3 свойства будут заполнены в результате выполнения кода\r\n//\r\n// 'owner';\r\n// 'name';\r\n// 'type';\r\n// 'canTalk';\r\n// 'speak';\r\n\r\n//J дана следующая разметка\r\n// <div id=\"main\">\r\n//   <div id=\"card-00\">This card is smaller.</div>\r\n//   <div id=\"card-01\">This card is bigger.</div>\r\n// </div>\r\n// // какой код вернет значение ширины блока с id=\"card-01\"\r\n// document.getElementById('card-01').style.width;\r\n// document.getElementById('card-01').innerHTML.length;\r\n// document.getElementById('card-01').width;\r\n// document.getElementById('card-01').getBoundingClientRect().width;\r\n\r\n//K дан код\r\n// let array = [1,2,3,4,4,5,4,4];\r\n// for (let i = 0; i < array.length; i++) {\r\n// \tif (array[i] === 4){\r\n// \t\tarray.splice(i,1);\r\n// \t}\r\n// }\r\n// // какой будет результат в результате выполнения кода\r\n// [1,2,3,5];\r\n// [1,2,3,4,5,4];\r\n// [1,2,3,4,5,4,4];\r\n// [1,2,3,4,4,5,4];\r\n\r\n//L дан код, что выведет консоль в результате исполнения?\r\n// let first = 'Who';\r\n// let second = 'What';\r\n// try {\r\n// \ttry {\r\n// \t\tthrow new Error('Sad trombone');\r\n// \t} catch (err) {\r\n// \t\tfirst = 'Why';\r\n// \t\tthrow err;\r\n// \t} finally {\r\n// \t\tsecond = 'When';\r\n// \t}\r\n// } catch (err) {\r\n// \tsecond = 'Where';\r\n// }\r\n\r\n// console.log(first);\r\n// console.log(second);\r\n//\r\n// 'Who', 'When';\r\n// 'Why', 'Where';\r\n// 'Why', 'When';\r\n// 'Who', 'Where';\r\n//\r\n//M Дан ниже код, чему будет равен result в результате его исполнения\r\n// function changeValue(param) {\r\n// \tparam = 5;\r\n// }\r\n// let a = 10;\r\n// let b = a;\r\n// changeValue(b);\r\n// const result = a + ' - ' + b;\r\n\r\n\r\n// Task 1\r\n// Есть некоторая строка (const str = 'fgfggg';), что будет, если мы возьмем str[0]\r\n\r\n// Task 2\r\n// Реализуйте необходимый код, что бы выражение (2).plus(3).minus(1) сработало и вернуло 4\r\n// Number.prototype.plus = function (v) { return this + v};\r\n// Number.prototype.minus = function(v) { return this - v};\r\n//\r\n// console.log((2).plus(3).minus(1))\r\n\r\n// Task 3\r\n// Реализуйте функцию, которая принимает следующие аргументы (строки) '*', '1', 'b', '1c', и возвращает строку '1*b*1c'\r\n//\r\n// function  getStr() {\r\n// \treturn [].slice.call(arguments, 1).join(arguments[0]);\r\n// }\r\n\r\n\r\n// Task 4\r\n// Напишите функцию которая найдет сумму всех вершин в структуре данны типа tree\r\n// Рекурсивно\r\n// В цикле\r\n\r\nconst tree = {\r\n\tvalueNode: 3,\r\n\tnext: [{\r\n\t\tvalueNode: 1,\r\n\t\tnext: null\r\n\t},\r\n\t\t{\r\n\t\t\tvalueNode: 3,\r\n\t\t\tnext: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tvalueNode: 2,\r\n\t\t\tnext: null\r\n\t\t},\r\n\t\t{\r\n\t\t\tvalueNode: 2,\r\n\t\t\tnext: [\r\n\t\t\t\t{\r\n\t\t\t\t\tvalueNode: 1,\r\n\t\t\t\t\tnext: null\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tvalueNode: 5,\r\n\t\t\t\t\tnext: null\r\n\t\t\t\t}\r\n\t\t\t]\r\n\t\t}]\r\n};\r\n\r\nfunction getSum(obj) {\r\n\tlet arr = [obj];\r\n\tlet sum = 0;\r\n\tlet current;\r\n\r\n\twhile(arr.length > 0) {\r\n\t\tcurrent = arr.shift();\r\n\t\tsum += current.valueNode;\r\n\r\n\t\tif(current.next != null) {\r\n\t\t\tfor(let i = 0; i < current.next.length; i++) {\r\n\t\t\t\tarr.push(current.next[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn sum;\r\n}\r\n\r\n// Task 5\r\n// исправить код, что бы работал правильно\r\n\r\n// for (var i = 0; i < 10; i++) {\r\n// \tsetTimeout(function () {\r\n// \t\tconsole.log(i);\r\n// \t}, 100);\r\n// }\r\n\r\n// Task 6\r\n// Реализуйте функцию Foo, что бы все корректно работало\r\n\r\nfunction Book(name, author) {\r\n\tthis.name = name;\r\n\tthis.author = author;\r\n\treturn this;\r\n}\r\n\r\n// function Foo(fn, name, author) {\r\n// \treturn fn.call({}, name, author)\r\n// }\r\n\r\n// function Foo(Book, 'Учебник javascript', 'Петр Сергеев')\r\n//\r\n// var book = Foo(Book, 'js', 'petr');\r\n// console.log(book.name);\r\n\r\n// Task 7\r\n// Реализовать функцию f: f(2, 3) -> 5, при вызове f(2)(3), тоже вернет 5\r\n\r\nfunction f(a ,b) {\r\n\tif (b !== undefined) {\r\n\t\treturn a + b;\r\n\t} else {\r\n\t\treturn function(b) {\r\n\t\t\treturn a + b;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Task 8\r\n// Реализовать функцию fo: fo(1)(2)(3)() -> 6, fo(0)(3)(1)(5)() -> 9\r\n\r\nfunction fo(arg) {\r\n\tlet v = arg;\r\n\r\n\treturn  function (a) {\r\n\t\tif(a !== undefined) {\r\n\t\t\treturn fo(v + a);\r\n\t\t} else {\r\n\t\t\treturn v;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n\r\n// Task 9\r\n// Реализовать функции seven, plus, one, five, minus, two так, что бы следующие вызовы работали seven(plus(one())) -> 8. five(minus(two())) -> 3\r\n\r\nfunction one(arg) {\r\n\tif(typeof arg === 'function') {\r\n\t\treturn arg(1);\r\n\t} else {\r\n\t\treturn 1;\r\n\t}\r\n}\r\nfunction two(arg) {\r\n\tif(typeof arg === 'function') {\r\n\t\treturn arg(2);\r\n\t} else {\r\n\t\treturn 2;\r\n\t}\r\n}\r\n\r\nfunction five(arg) {\r\n\tif(typeof arg === 'function') {\r\n\t\treturn arg(5);\r\n\t} else {\r\n\t\treturn 5;\r\n\t}\r\n}\r\n\r\nfunction seven(arg) {\r\n\tif(typeof arg === 'function') {\r\n\t\treturn arg(7);\r\n\t} else {\r\n\t\treturn 7;\r\n\t}\r\n}\r\n\r\nfunction plus(arg) {\r\n\treturn function(a) {\r\n\t\treturn a + arg;\r\n\t}\r\n}\r\n\r\nfunction minus(arg) {\r\n\treturn function(a) {\r\n\t\treturn a - arg;\r\n\t}\r\n}\r\n\r\n// Task 10\r\n// Реализовать функцию сортировки массива пузырьком\r\n\r\n// Task 11\r\n// Есть строка, состоящая из разных скобок - str = \"())({}}{()][][\", написать функцию проверки закрыты ли все.\r\n\r\nfunction check(str) {\r\n\tconst config = {\r\n\t\t'(': ')',\r\n\t\t'{': '}',\r\n\t\t'[': ']',\r\n\t};\r\n\r\n\tconst helper = str => {\r\n\t\tif(str.length === 0) return true;\r\n\t\tif( (str.length + 1) % 2 === 0) return false;\r\n\r\n\t\tconst isOpenBrackets = char => Object.keys(config).includes(char);\r\n\t\tconst getClosingBracket = char => config[char];\r\n\r\n\t\tfor(let i = 0; i < str.length; i++) {\r\n\t\t\tif (isOpenBrackets(str[i]) && getClosingBracket(str[i]) === str[i + 1]) {\r\n\t\t\t\tlet newString = `${str.slice(0, i)}${str.slice(i + 2)}`;\r\n\t\t\t\treturn helper(newString);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\r\n\treturn helper(str);\r\n}\r\n\r\n\r\n// Task 12\r\n// Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из\r\n// уникальных значений первого массива.\r\n\r\n// Task 13\r\n// Написать функцию, принимающую аргументом массив чисел и возвращающую новый массив, состоящий из удвоенных значений первого.\r\n// f([1, 2, null, 7, 8, null, 3]); // => [2, 4, 14, 16, 6]\r\n\r\n\r\n\r\n\r\n// Task 14\r\n// Необходимо написать функцию, возвращающую значения всех вершин дерева\r\n// getTreeValues(tree); // => [1, 2, 3, 4, 5, 6, 7]\r\n\r\nconst tree2 = {\r\n\tvalue: 1,\r\n\tchildren: [\r\n\t\t{\r\n\t\t\tvalue: 2,\r\n\t\t\tchildren: [\r\n\t\t\t\t{ value: 4 },\r\n\t\t\t\t{ value: 5 },\r\n\t\t\t]\r\n\t\t},\r\n\t\t{\r\n\t\t\tvalue: 3,\r\n\t\t\tchildren: [\r\n\t\t\t\t{ value: 6 },\r\n\t\t\t\t{ value: 7 },\r\n\t\t\t]\r\n\t\t}\r\n\t]\r\n};\r\n\r\n// Task 15\r\n// Необходимо написать функцию, возвращающую сумму всех вершин дерева из Task 14\r\n\r\n// Task 16\r\n// Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и\r\n// некоторый «звук взрыва» (строку, которую вернет через заданное время).\r\n\r\nfunction Bomb(message, delay) {\r\n\tthis.message = message;\r\n\tsetTimeout(this.blowUp.bind(this), delay * 1000);\r\n}\r\n\r\nBomb.prototype.blowUp = function (){\r\n\tconsole.log(this.message);\r\n}\r\n\r\nnew Bomb('Explosion!', 5);\r\n\r\n// Task 17\r\n// Необходимо реализовать функцию, принимающую в аргументах строку, состоящую из букв и вернуть новую строку,\r\n// в которой повторяющиеся буквы заменены количеством повторений.\r\n// rle('AVVVBBBVVXDHJFFFFDDDDDDHAAAAJJJDDSLSSSDDDD'); // => 'AV3B3V2XDHJF4D6HA4J3D2SLS3D4'\r\n\r\n// Task 18\r\n// Реализуйте функцию isSorted(), которая возвращает true или false в зависимости о того, отсортирован ли переданный ей числовой массив.\r\n\r\n// Task 19\r\n// Реализуйте функцию missing(), которая принимает неотсортированный массив уникальных чисел (то есть, числа в нём не повторяются)\r\n// от 1 до некоего числа n, и возвращает число, отсутствующее в последовательности. Там может быть либо одно отсутствующее число,\r\n// либо их может не быть вовсе.\r\n// missing([])                         // undefined\r\n// missing([1, 4, 3])                  // 2\r\n// missing([2, 3, 4])                  // 1\r\n// missing([5, 1, 4, 2])               // 3\r\n// missing([1, 2, 3, 4])               // undefined\r\n\r\n// Task 20\r\n// Реализуйте класс LinkedList, не используя встроенные массивы JavaScript ( [] ). Ваш LinkedList должен поддерживать лишь 2 метода: add() и has().\r\n// class LinkedList {...}\r\n// let list = new LinkedList(1, 2, 3)\r\n// list.add(4)                           // undefined\r\n// list.add(5)                           // undefined\r\n// list.has(1)                           // true\r\n// list.has(4)                           // true\r\n// list.has(6)                           // false\r\n\r\n// Task 21\r\n// Что выведет консоль?\r\n\r\n// Promise\r\n// \t.resolve()\r\n// \t.then(() => console.log(1))\r\n// \t.then(() => console.log(2))\r\n// \t.then(() => console.log(3));\r\n//\r\n// Promise\r\n// \t.resolve()\r\n// \t.then(() => console.log(4))\r\n// \t.then(() => console.log(5))\r\n// \t.then(() => console.log(6));","C:\\IT-incubator\\JS\\JSwednesday\\src\\lessons\\lesson7\\less7.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":3,"column":8,"nodeType":"87","messageId":"88","endLine":3,"endColumn":15},{"ruleId":"85","severity":1,"message":"89","line":6,"column":8,"nodeType":"87","messageId":"88","endLine":6,"endColumn":15},{"ruleId":"81","replacedBy":"90"},{"ruleId":"83","replacedBy":"91"},{"ruleId":"81","replacedBy":"92"},{"ruleId":"83","replacedBy":"93"},{"ruleId":"85","severity":1,"message":"94","line":1,"column":9,"nodeType":"87","messageId":"88","endLine":1,"endColumn":12},{"ruleId":"95","severity":1,"message":"96","line":269,"column":1,"nodeType":"97","endLine":269,"endColumn":23},{"ruleId":"98","severity":1,"message":"99","line":9,"column":5,"nodeType":"87","messageId":"88","endLine":9,"endColumn":6},{"ruleId":"100","severity":1,"message":"101","line":16,"column":1,"nodeType":"102","messageId":"103","endLine":20,"endColumn":2},{"ruleId":"104","severity":2,"message":"105","line":18,"column":45,"nodeType":"87","messageId":"106","endLine":18,"endColumn":46},{"ruleId":"95","severity":1,"message":"96","line":7,"column":1,"nodeType":"97","endLine":8,"endColumn":3},{"ruleId":"81","replacedBy":"107"},{"ruleId":"83","replacedBy":"108"},{"ruleId":"98","severity":1,"message":"109","line":202,"column":7,"nodeType":"87","messageId":"88","endLine":202,"endColumn":11},{"ruleId":"98","severity":1,"message":"110","line":231,"column":10,"nodeType":"87","messageId":"88","endLine":231,"endColumn":16},{"ruleId":"98","severity":1,"message":"111","line":262,"column":10,"nodeType":"87","messageId":"88","endLine":262,"endColumn":14},{"ruleId":"98","severity":1,"message":"112","line":280,"column":10,"nodeType":"87","messageId":"88","endLine":280,"endColumn":11},{"ruleId":"98","severity":1,"message":"113","line":298,"column":11,"nodeType":"87","messageId":"88","endLine":298,"endColumn":13},{"ruleId":"98","severity":1,"message":"114","line":309,"column":10,"nodeType":"87","messageId":"88","endLine":309,"endColumn":13},{"ruleId":"98","severity":1,"message":"115","line":316,"column":10,"nodeType":"87","messageId":"88","endLine":316,"endColumn":13},{"ruleId":"98","severity":1,"message":"116","line":324,"column":10,"nodeType":"87","messageId":"88","endLine":324,"endColumn":14},{"ruleId":"98","severity":1,"message":"117","line":332,"column":10,"nodeType":"87","messageId":"88","endLine":332,"endColumn":15},{"ruleId":"98","severity":1,"message":"118","line":340,"column":10,"nodeType":"87","messageId":"88","endLine":340,"endColumn":14},{"ruleId":"98","severity":1,"message":"119","line":346,"column":10,"nodeType":"87","messageId":"88","endLine":346,"endColumn":15},{"ruleId":"98","severity":1,"message":"120","line":358,"column":10,"nodeType":"87","messageId":"88","endLine":358,"endColumn":15},{"ruleId":"98","severity":1,"message":"121","line":400,"column":7,"nodeType":"87","messageId":"88","endLine":400,"endColumn":12},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"@typescript-eslint/no-unused-vars","'Lesson1' is defined but never used.","Identifier","unusedVar","'Lesson4' is defined but never used.",["122"],["123"],["122"],["123"],"'log' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'t' is assigned a value but never used.","no-extend-native","Function prototype is read only, properties should not be added.","AssignmentExpression","unexpected","no-undef","'a' is not defined.","undef",["122"],["123"],"'tree' is assigned a value but never used.","'getSum' is defined but never used.","'Book' is defined but never used.","'f' is defined but never used.","'fo' is defined but never used.","'one' is defined but never used.","'two' is defined but never used.","'five' is defined but never used.","'seven' is defined but never used.","'plus' is defined but never used.","'minus' is defined but never used.","'check' is defined but never used.","'tree2' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]